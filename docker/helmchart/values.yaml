# Transiter Helm chart values

# The Transiter version can either be:
#
# 1. A stable numbered version, for example 0.3.1. The available versions
#    can be seen on Docker Hub.
# 2. The latest stable version, denoted by "latest"
# 3. The latest successful development build, denoted by "latest-dev"
#
# Note for 2 and 3 that the Transiter web service API can change between versions,
# and so the web service API of Transiter on your Kubernetes cluster may
# unexpectedly change if a newer Transiter version is pulled on a node. For
# production it's thus recommended to pin to a specific release.
#
version: "latest"

# The name given here will determine the name of the Kubernetes objects
# created. Changing the name is thus a way to have multiple Transiter
# instances running in the same Kubernetes namespace.
#
# Note in particular the following names, which you may need to refer to
# in other Kubernetes objects:
#
# * The Kubernetes service corresponding to the Transiter web service will
#   be given name "{name}-webservice". So, by default, "transiter-webservice".
#   You will likely have to refer to this in an ingress or other container.
#
name: "transiter"

webservice:
  # The number of web service (Gunicorn) containers to run.
  replicaCount: 1
  # The number of workers each web service container will run.
  # The standard formula is (2 * number of CPUs + 1).
  workersPerReplica: 3

# Transiter supports custom feed parsers, wherein a Transiter user will
# provide a Python function that is used to parse a feed type that is not
# natively supported by Transiter. For this to work, the package containing
# the parser has to be available in each Python environment that Transiter
# runs.
#
# This is the motivation for the following configuration. Provide a list
# of packages (in pip format) and those packages will be available to
# Transiter each time it performs a feed update.
#
pythonPackagesToProvide:
  - "transiter_nycsubway"

postgres:
  persistentVolume:
    # Whether to enable a persistent volume for the data directory of the
    # Postgres container. In production this is absolutely necessary to
    # ensure that data is conserved across the lifecycle of a specific container.
    # However for testing it's often easiest to not use a persistent volume
    # to keep things simple. In this case the subsequent settings are ignored.
    enabled: false
    # The following three settings correspond to the persistent volume claim.
    # They should match a persistent volume you provide on the cluster.
    storageClassName: "manual"
    capacity: "5Gi"
    accessMode: "ReadWriteOnce"

# Whether to enable the Transiter documentation being available on the /docs
# path of the instance.
#
# The documentation is served as static files from the
# container's file system in an inefficient way. In production it is
# advisable to disable the documentation to prevent a malicious user from
# spending system resources serving the documentation.
#
documentationEnabled: true
