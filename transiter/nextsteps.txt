Main dev thread:
 - then incorporate the GTFS code!
 - look at the current API and replicate it. Do this by
    first documenting _everything_
 - add the terminus abbr table and load the data. Can this be done in a way
    that is not so specific to the NYC subway?



Other tasks
- Improve/clean up the NYC Subway xml file
- Get rid of individuals DAMS, no needed. Generic dam or possibly factor
- Make route list entries better (rename). Add relationship to Stop
    like daytime_routes, evening_routes etc.
- write the feed health code, including having a database table that tracks
    feed updates....or a protobuf file is probably better
    Maybe need a feed runnable that deletes old feed data
- write the optimized topological sort algorithm for generating routes lists
    (better name than route lists?)
- write the version of topological sort
    that also takes additional paths to help order disconnected
    components
- find out when sqlalchemy triggers updates and use this to inform the sync
- have a way to force reset the feeds
- have a way to force reset the database




PROTOCOL BUFFERS

 protoc --python_out ./gtfsrealtime.py realtimerail/utils/protobuf/gtfs-realtime.proto
