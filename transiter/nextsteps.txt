Main dev thread:
 - Need to document the API
 - Build the basic GET services
 - After the update process is running, test that it's giving the same
    data as realtimerail app (before improving the predictions)


Other tasks
  - And then somehow need to test the new GTFS DB sync code. Hard!
- write unit tests for everything - for SQLALchemy can use sqllite
 - add the terminus abbr table and load the data. Can this be done in a way
    that is not so specific to the NYC subway?
- Improve/clean up the NYC Subway xml file parser
- Get rid of individuals DAMS, no needed. Generic dam or possibly factor
- Make route list entries better (rename). Add relationship to Stop
    like daytime_routes, evening_routes etc.
- write the feed health code, including having a database table that tracks
    feed updates....or a protobuf file is probably better
    Maybe need a feed runnable that deletes old feed data
- write the optimized topological sort algorithm for generating routes lists
    (better name than route lists?)
- write the version of topological sort
    that also takes additional paths to help order disconnected
    components
- find out when sqlalchemy triggers updates and use this to inform the sync
- have a way to force reset the feeds (admin service?)
- have a way to force reset the database (admin service?)
- make a system to download the latest GTFS static data from the transit agency
    and check if up to date
- add uniqueness and not null conditions to the schema
- all of our SQL queries should be filtering on the transit system!!!!
- could speed up sync_trip_data by doing one query to retrieve all stop_events
- Use APScheduler (Advanced Python Scheduler) to create runnables that
    can automatically update the feeds
    https://apscheduler.readthedocs.io/en/latest/userguide.html

Testing with sqlalchemy:
https://www.oreilly.com/library/view/essential-sqlalchemy-2nd/9781491916544/ch04.html
