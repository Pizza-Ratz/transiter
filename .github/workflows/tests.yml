name: Transiter build and tests
on: [push, pull_request]
jobs:
  unit-tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
            python-version: 3.7
      - name: Install Transiter and other Python packages
        run: |
          pip install --quiet .
          pip install --quiet -r dev-requirements.txt
      - name: Launch Postgres
        run: docker run -d --env POSTGRES_USER=transiter --env POSTGRES_PASSWORD=transiter --env POSTGRES_DB=transiter -p 5432:5432 postgres:12
      - name: Run unit tests
        run: coverage run --source=transiter --omit="transiter/alembic/*","*pb2/*" -m pytest --color=yes tests/unit tests/db
      # TODO
      # - name: Post coverage to Coveralls
      #  uses: coverallsapp/github-action@master
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}

  end-to-end-tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install Transiter and other Python packages
        run: |
          pip install --quiet .
          pip install --quiet -r dev-requirements.txt
      - name: Launch Postgres, RabbitMQ, and Transiter services
        run: |
          docker run -d --env POSTGRES_USER=transiter --env POSTGRES_PASSWORD=transiter --env POSTGRES_DB=transiter -p 5432:5432 postgres:12
          docker run -d -p 5672:5672 rabbitmq:3
          transiterclt db reset --yes
          transiterclt launch webservice > webservice.log 2>&1 &
          transiterclt launch executor > executor.log 2>&1 &
          transiterclt launch scheduler > scheduler.log  2>&1 &
          python tests/endtoend/sourceserver.py > sourceserver.log  2>&1 &
      - name: Run end to end tests
        run: pytest --color=yes tests/endtoend

  database-upgrade-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install Transiter and other Python packages
        run: |
          pip install --quiet .
      - name: Launch Postgres and restore the legacy database
        run: |
          docker run -d -v $(pwd)/tests/upgrade:/dumps --name postgres --env POSTGRES_USER=transiter --env POSTGRES_PASSWORD=transiter --env POSTGRES_DB=transiter -p 5432:5432 postgres:12
          sleep 10
          docker exec postgres pg_restore -U transiter -d transiter dumps/db.dump
        # TODO is this ^ actually working
      - name: Upgrade the database (this is the test)
        run: transiterclt db upgrade

  formatting-enforcement:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install Black and PyCodeStyle
        run: pip install --quiet black==19.10b pycodestyle==2.5.0
      - name: Run formatting checks
        run: |
          black transiter tests *py
          pycodestyle --ignore=E203,E501,W503 --exclude="*pb2.py" transiter tests *py

  containerized-build-and-tests:
    #needs:
    #  - unit-tests
    #  - end-to-end-tests
    #  - database-upgrade-test
    #  - formatting-enforcement
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: pip install --quiet docker
      - name: Build and launch containerized Transiter
        run: |
          pip install --quiet docker
          python travis.py before
          make docker-ci
          docker-compose -p transiter -f docker/docker-compose.yml up -d
      - name: Run tests
        run: |
          make containerized-unit-tests
          make containerized-db-tests
          make end-to-end-tests
      - name: Push artifacts to Docker Hub and PyPI
        env:
          TRAVIS_BRANCH: ${{ github.ref }}
          TRAVIS_PULL_REQUEST: ${{ github.base_ref != null }}
          TRAVIS_TAG: a # use the branch instead
          TRAVIS_BUILD_NUMBER: 2000${{ github.run_number }}
          TRAVIS_JOB_WEB_URL: a# TODO
          TRAVIS_COMMIT: ${{ github.sha }}
          TRAVIS_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          DOCKER_USERNAME: h
          DOCKER_PASSWORD: i
          TWINE_USERNAME: j
          TWINE_PASSWORD: k
        run: python travis.py after
